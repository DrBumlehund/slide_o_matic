/**
 * generated by Xtext 2.12.0
 */
package dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.util;

import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.SlideOMaticPackage
 * @generated
 */
public class SlideOMaticSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SlideOMaticPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SlideOMaticSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SlideOMaticPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SlideOMaticPackage.PRESENTATION:
      {
        Presentation presentation = (Presentation)theEObject;
        T result = casePresentation(presentation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.THEME:
      {
        Theme theme = (Theme)theEObject;
        T result = caseTheme(theme);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.AUTHORS:
      {
        Authors authors = (Authors)theEObject;
        T result = caseAuthors(authors);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.INSTITUTE:
      {
        Institute institute = (Institute)theEObject;
        T result = caseInstitute(institute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.DATE:
      {
        Date date = (Date)theEObject;
        T result = caseDate(date);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.SLIDE:
      {
        Slide slide = (Slide)theEObject;
        T result = caseSlide(slide);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.SECTION:
      {
        Section section = (Section)theEObject;
        T result = caseSection(section);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.CONTENT:
      {
        Content content = (Content)theEObject;
        T result = caseContent(content);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.BLOCKABLE_CONTENT:
      {
        BlockableContent blockableContent = (BlockableContent)theEObject;
        T result = caseBlockableContent(blockableContent);
        if (result == null) result = caseContent(blockableContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.TEXT:
      {
        Text text = (Text)theEObject;
        T result = caseText(text);
        if (result == null) result = caseBlockableContent(text);
        if (result == null) result = caseContent(text);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.BLOCK:
      {
        Block block = (Block)theEObject;
        T result = caseBlock(block);
        if (result == null) result = caseBlockableContent(block);
        if (result == null) result = caseContent(block);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.LIST:
      {
        List list = (List)theEObject;
        T result = caseList(list);
        if (result == null) result = caseBlockableContent(list);
        if (result == null) result = caseContent(list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.NUMBERED_LIST:
      {
        NumberedList numberedList = (NumberedList)theEObject;
        T result = caseNumberedList(numberedList);
        if (result == null) result = caseList(numberedList);
        if (result == null) result = caseBlockableContent(numberedList);
        if (result == null) result = caseContent(numberedList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.UN_NUMBERED_LIST:
      {
        UnNumberedList unNumberedList = (UnNumberedList)theEObject;
        T result = caseUnNumberedList(unNumberedList);
        if (result == null) result = caseList(unNumberedList);
        if (result == null) result = caseBlockableContent(unNumberedList);
        if (result == null) result = caseContent(unNumberedList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.LIST_ITEM:
      {
        ListItem listItem = (ListItem)theEObject;
        T result = caseListItem(listItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.FLOATS:
      {
        Floats floats = (Floats)theEObject;
        T result = caseFloats(floats);
        if (result == null) result = caseBlockableContent(floats);
        if (result == null) result = caseContent(floats);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.IMAGE:
      {
        Image image = (Image)theEObject;
        T result = caseImage(image);
        if (result == null) result = caseFloats(image);
        if (result == null) result = caseBlockableContent(image);
        if (result == null) result = caseContent(image);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.SIZE:
      {
        Size size = (Size)theEObject;
        T result = caseSize(size);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.WAY:
      {
        Way way = (Way)theEObject;
        T result = caseWay(way);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.TABLE:
      {
        Table table = (Table)theEObject;
        T result = caseTable(table);
        if (result == null) result = caseFloats(table);
        if (result == null) result = caseBlockableContent(table);
        if (result == null) result = caseContent(table);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.TABLE_ROW:
      {
        TableRow tableRow = (TableRow)theEObject;
        T result = caseTableRow(tableRow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.CODE:
      {
        Code code = (Code)theEObject;
        T result = caseCode(code);
        if (result == null) result = caseContent(code);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.ANIMATION:
      {
        Animation animation = (Animation)theEObject;
        T result = caseAnimation(animation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.ANIMATION_TYPE:
      {
        AnimationType animationType = (AnimationType)theEObject;
        T result = caseAnimationType(animationType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.SEC:
      {
        Sec sec = (Sec)theEObject;
        T result = caseSec(sec);
        if (result == null) result = caseSection(sec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.SUB_SEC:
      {
        SubSec subSec = (SubSec)theEObject;
        T result = caseSubSec(subSec);
        if (result == null) result = caseSection(subSec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.SUB_SUB_SEC:
      {
        SubSubSec subSubSec = (SubSubSec)theEObject;
        T result = caseSubSubSec(subSubSec);
        if (result == null) result = caseSection(subSubSec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.TOC:
      {
        TOC toc = (TOC)theEObject;
        T result = caseTOC(toc);
        if (result == null) result = caseContent(toc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.PROPORTIONAL_SIZE:
      {
        ProportionalSize proportionalSize = (ProportionalSize)theEObject;
        T result = caseProportionalSize(proportionalSize);
        if (result == null) result = caseSize(proportionalSize);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.EXACT_SIZE:
      {
        ExactSize exactSize = (ExactSize)theEObject;
        T result = caseExactSize(exactSize);
        if (result == null) result = caseSize(exactSize);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.WIDTH:
      {
        Width width = (Width)theEObject;
        T result = caseWidth(width);
        if (result == null) result = caseWay(width);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.HEIGHT:
      {
        Height height = (Height)theEObject;
        T result = caseHeight(height);
        if (result == null) result = caseWay(height);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.MOVE:
      {
        Move move = (Move)theEObject;
        T result = caseMove(move);
        if (result == null) result = caseAnimationType(move);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SlideOMaticPackage.JUMP:
      {
        Jump jump = (Jump)theEObject;
        T result = caseJump(jump);
        if (result == null) result = caseAnimationType(jump);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Presentation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Presentation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePresentation(Presentation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Theme</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Theme</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTheme(Theme object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Authors</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Authors</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAuthors(Authors object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Institute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Institute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstitute(Institute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Date</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Date</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDate(Date object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Slide</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Slide</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSlide(Slide object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSection(Section object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContent(Content object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Blockable Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Blockable Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlockableContent(BlockableContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Text</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Text</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseText(Text object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlock(Block object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseList(List object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Numbered List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Numbered List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberedList(NumberedList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Un Numbered List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Un Numbered List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnNumberedList(UnNumberedList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListItem(ListItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Floats</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Floats</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFloats(Floats object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Image</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Image</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImage(Image object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Size</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Size</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSize(Size object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Way</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Way</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWay(Way object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Table</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Table</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTable(Table object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Table Row</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Table Row</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTableRow(TableRow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCode(Code object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Animation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Animation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnimation(Animation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Animation Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Animation Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnimationType(AnimationType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSec(Sec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Sec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Sec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubSec(SubSec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Sub Sec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Sub Sec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubSubSec(SubSubSec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>TOC</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>TOC</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTOC(TOC object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Proportional Size</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Proportional Size</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProportionalSize(ProportionalSize object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exact Size</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exact Size</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExactSize(ExactSize object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Width</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Width</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWidth(Width object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Height</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Height</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHeight(Height object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Move</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Move</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMove(Move object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Jump</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Jump</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJump(Jump object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SlideOMaticSwitch
