/*
 * generated by Xtext 2.12.0
 */
package dk.sdu.mmmi.mdsd.f18.dsl.external.serializer;

import com.google.inject.Inject;
import dk.sdu.mmmi.mdsd.f18.dsl.external.services.SlideOMaticGrammarAccess;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Animation;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Authors;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Block;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Code;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Date;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.ExactSize;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Image;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Institute;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Jump;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.ListItem;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Move;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.NumberedList;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Presentation;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.ProportionalSize;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Sec;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Slide;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.SlideOMaticPackage;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.SubSec;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.SubSubSec;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.TOC;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Table;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.TableRow;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Text;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.Theme;
import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.UnNumberedList;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SlideOMaticSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SlideOMaticGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SlideOMaticPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SlideOMaticPackage.ANIMATION:
				sequence_Animation(context, (Animation) semanticObject); 
				return; 
			case SlideOMaticPackage.AUTHORS:
				sequence_Authors(context, (Authors) semanticObject); 
				return; 
			case SlideOMaticPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case SlideOMaticPackage.CODE:
				sequence_Code(context, (Code) semanticObject); 
				return; 
			case SlideOMaticPackage.DATE:
				sequence_Date(context, (Date) semanticObject); 
				return; 
			case SlideOMaticPackage.EXACT_SIZE:
				sequence_Size(context, (ExactSize) semanticObject); 
				return; 
			case SlideOMaticPackage.IMAGE:
				sequence_Image(context, (Image) semanticObject); 
				return; 
			case SlideOMaticPackage.INSTITUTE:
				sequence_Institute(context, (Institute) semanticObject); 
				return; 
			case SlideOMaticPackage.JUMP:
				sequence_AnimationType(context, (Jump) semanticObject); 
				return; 
			case SlideOMaticPackage.LIST_ITEM:
				sequence_ListItem(context, (ListItem) semanticObject); 
				return; 
			case SlideOMaticPackage.MOVE:
				sequence_AnimationType(context, (Move) semanticObject); 
				return; 
			case SlideOMaticPackage.NUMBERED_LIST:
				sequence_NumberedList(context, (NumberedList) semanticObject); 
				return; 
			case SlideOMaticPackage.PRESENTATION:
				sequence_Presentation(context, (Presentation) semanticObject); 
				return; 
			case SlideOMaticPackage.PROPORTIONAL_SIZE:
				sequence_Size(context, (ProportionalSize) semanticObject); 
				return; 
			case SlideOMaticPackage.SEC:
				sequence_Section(context, (Sec) semanticObject); 
				return; 
			case SlideOMaticPackage.SLIDE:
				sequence_Slide(context, (Slide) semanticObject); 
				return; 
			case SlideOMaticPackage.SUB_SEC:
				sequence_Section(context, (SubSec) semanticObject); 
				return; 
			case SlideOMaticPackage.SUB_SUB_SEC:
				sequence_Section(context, (SubSubSec) semanticObject); 
				return; 
			case SlideOMaticPackage.TOC:
				sequence_Content(context, (TOC) semanticObject); 
				return; 
			case SlideOMaticPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case SlideOMaticPackage.TABLE_ROW:
				sequence_TableRow(context, (TableRow) semanticObject); 
				return; 
			case SlideOMaticPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			case SlideOMaticPackage.THEME:
				sequence_Theme(context, (Theme) semanticObject); 
				return; 
			case SlideOMaticPackage.UN_NUMBERED_LIST:
				sequence_UnNumberedList(context, (UnNumberedList) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AnimationType returns Jump
	 *
	 * Constraint:
	 *     {Jump}
	 */
	protected void sequence_AnimationType(ISerializationContext context, Jump semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnimationType returns Move
	 *
	 * Constraint:
	 *     {Move}
	 */
	protected void sequence_AnimationType(ISerializationContext context, Move semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Animation returns Animation
	 *
	 * Constraint:
	 *     (target=[Floats|ID] type=AnimationType location=Alignment size=Size?)
	 */
	protected void sequence_Animation(ISerializationContext context, Animation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Authors returns Authors
	 *
	 * Constraint:
	 *     (names+=STRING names+=STRING*)
	 */
	protected void sequence_Authors(ISerializationContext context, Authors semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Block
	 *     BlockableContent returns Block
	 *     Block returns Block
	 *
	 * Constraint:
	 *     (name=STRING? content=BlockableContent click=Click?)
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Code
	 *     Code returns Code
	 *
	 * Constraint:
	 *     (lang=ID code=STRING)
	 */
	protected void sequence_Code(ISerializationContext context, Code semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SlideOMaticPackage.Literals.CODE__LANG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SlideOMaticPackage.Literals.CODE__LANG));
			if (transientValues.isValueTransient(semanticObject, SlideOMaticPackage.Literals.CODE__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SlideOMaticPackage.Literals.CODE__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeAccess().getLangIDTerminalRuleCall_1_0(), semanticObject.getLang());
		feeder.accept(grammarAccess.getCodeAccess().getCodeSTRINGTerminalRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Content returns TOC
	 *
	 * Constraint:
	 *     {TOC}
	 */
	protected void sequence_Content(ISerializationContext context, TOC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Date returns Date
	 *
	 * Constraint:
	 *     date=STRING
	 */
	protected void sequence_Date(ISerializationContext context, Date semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SlideOMaticPackage.Literals.DATE__DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SlideOMaticPackage.Literals.DATE__DATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDateAccess().getDateSTRINGTerminalRuleCall_1_0(), semanticObject.getDate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Image
	 *     BlockableContent returns Image
	 *     Floats returns Image
	 *     Image returns Image
	 *
	 * Constraint:
	 *     (name=ID src=STRING alignment=Alignment? size=Size click=Click?)
	 */
	protected void sequence_Image(ISerializationContext context, Image semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Institute returns Institute
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Institute(ISerializationContext context, Institute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SlideOMaticPackage.Literals.INSTITUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SlideOMaticPackage.Literals.INSTITUTE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInstituteAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ListItem returns ListItem
	 *
	 * Constraint:
	 *     (item=STRING nestedList=List? click=Click?)
	 */
	protected void sequence_ListItem(ISerializationContext context, ListItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns NumberedList
	 *     BlockableContent returns NumberedList
	 *     List returns NumberedList
	 *     NumberedList returns NumberedList
	 *
	 * Constraint:
	 *     items+=ListItem+
	 */
	protected void sequence_NumberedList(ISerializationContext context, NumberedList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Presentation returns Presentation
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         subtitle=STRING? 
	 *         theme=Theme? 
	 *         authors=Authors? 
	 *         institute=Institute? 
	 *         date=Date? 
	 *         (slides+=Slide | animations+=Animation)*
	 *     )
	 */
	protected void sequence_Presentation(ISerializationContext context, Presentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Section returns Sec
	 *
	 * Constraint:
	 *     {Sec}
	 */
	protected void sequence_Section(ISerializationContext context, Sec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Section returns SubSec
	 *
	 * Constraint:
	 *     {SubSec}
	 */
	protected void sequence_Section(ISerializationContext context, SubSec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Section returns SubSubSec
	 *
	 * Constraint:
	 *     {SubSubSec}
	 */
	protected void sequence_Section(ISerializationContext context, SubSubSec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Size returns ExactSize
	 *
	 * Constraint:
	 *     (size=INT (unit='cm' | unit='em' | unit='mm'))
	 */
	protected void sequence_Size(ISerializationContext context, ExactSize semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Size returns ProportionalSize
	 *
	 * Constraint:
	 *     ((way='width' | way='height') scale=INT)
	 */
	protected void sequence_Size(ISerializationContext context, ProportionalSize semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Slide returns Slide
	 *
	 * Constraint:
	 *     (((sec=Section name=STRING) | name=STRING)? contents+=Content+)
	 */
	protected void sequence_Slide(ISerializationContext context, Slide semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableRow returns TableRow
	 *
	 * Constraint:
	 *     (values+=STRING values+=STRING*)
	 */
	protected void sequence_TableRow(ISerializationContext context, TableRow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Table
	 *     BlockableContent returns Table
	 *     Floats returns Table
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (name=ID rows+=TableRow rows+=TableRow*)
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Text
	 *     BlockableContent returns Text
	 *     Text returns Text
	 *
	 * Constraint:
	 *     (text=STRING click=Click?)
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Theme returns Theme
	 *
	 * Constraint:
	 *     (theme=BeamerTheme themeColor=ThemeColor?)
	 */
	protected void sequence_Theme(ISerializationContext context, Theme semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns UnNumberedList
	 *     BlockableContent returns UnNumberedList
	 *     List returns UnNumberedList
	 *     UnNumberedList returns UnNumberedList
	 *
	 * Constraint:
	 *     items+=ListItem+
	 */
	protected void sequence_UnNumberedList(ISerializationContext context, UnNumberedList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
