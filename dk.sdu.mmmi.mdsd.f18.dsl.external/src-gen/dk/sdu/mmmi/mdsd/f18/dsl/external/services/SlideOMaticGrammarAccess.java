/*
 * generated by Xtext 2.12.0
 */
package dk.sdu.mmmi.mdsd.f18.dsl.external.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SlideOMaticGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PresentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Presentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPresentationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cThemeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cThemeThemeParserRuleCall_3_1_0 = (RuleCall)cThemeAssignment_3_1.eContents().get(0);
		private final Assignment cAuthorsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAuthorsAuthorsParserRuleCall_3_2_0 = (RuleCall)cAuthorsAssignment_3_2.eContents().get(0);
		private final Assignment cInstituteAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cInstituteInstituteParserRuleCall_3_3_0 = (RuleCall)cInstituteAssignment_3_3.eContents().get(0);
		private final Assignment cDateAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cDateDateParserRuleCall_3_4_0 = (RuleCall)cDateAssignment_3_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cSlidesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cSlidesSlideParserRuleCall_4_0_0 = (RuleCall)cSlidesAssignment_4_0.eContents().get(0);
		private final Assignment cAnimationsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cAnimationsAnimationParserRuleCall_4_1_0 = (RuleCall)cAnimationsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Project Extension is '.slide'
		//Presentation:
		//	"presentation" name=STRING "{" ("(" theme=Theme? authors=Authors? institute=Institute? date=Date? ")")?
		//	(slides+=Slide | animations+=Animation)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"presentation" name=STRING "{" ("(" theme=Theme? authors=Authors? institute=Institute? date=Date? ")")? (slides+=Slide |
		//animations+=Animation)* "}"
		public Group getGroup() { return cGroup; }
		
		//"presentation"
		public Keyword getPresentationKeyword_0() { return cPresentationKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//("(" theme=Theme? authors=Authors? institute=Institute? date=Date? ")")?
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//theme=Theme?
		public Assignment getThemeAssignment_3_1() { return cThemeAssignment_3_1; }
		
		//Theme
		public RuleCall getThemeThemeParserRuleCall_3_1_0() { return cThemeThemeParserRuleCall_3_1_0; }
		
		//authors=Authors?
		public Assignment getAuthorsAssignment_3_2() { return cAuthorsAssignment_3_2; }
		
		//Authors
		public RuleCall getAuthorsAuthorsParserRuleCall_3_2_0() { return cAuthorsAuthorsParserRuleCall_3_2_0; }
		
		//institute=Institute?
		public Assignment getInstituteAssignment_3_3() { return cInstituteAssignment_3_3; }
		
		//Institute
		public RuleCall getInstituteInstituteParserRuleCall_3_3_0() { return cInstituteInstituteParserRuleCall_3_3_0; }
		
		//date=Date?
		public Assignment getDateAssignment_3_4() { return cDateAssignment_3_4; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_3_4_0() { return cDateDateParserRuleCall_3_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
		
		//(slides+=Slide | animations+=Animation)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//slides+=Slide
		public Assignment getSlidesAssignment_4_0() { return cSlidesAssignment_4_0; }
		
		//Slide
		public RuleCall getSlidesSlideParserRuleCall_4_0_0() { return cSlidesSlideParserRuleCall_4_0_0; }
		
		//animations+=Animation
		public Assignment getAnimationsAssignment_4_1() { return cAnimationsAssignment_4_1; }
		
		//Animation
		public RuleCall getAnimationsAnimationParserRuleCall_4_1_0() { return cAnimationsAnimationParserRuleCall_4_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ThemeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Theme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThemeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cThemeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cThemeBeamerThemeParserRuleCall_1_0 = (RuleCall)cThemeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColorKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cThemeColorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cThemeColorThemeColorParserRuleCall_2_1_0 = (RuleCall)cThemeColorAssignment_2_1.eContents().get(0);
		
		//Theme:
		//	"theme" theme=BeamerTheme ("color" themeColor=ThemeColor)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"theme" theme=BeamerTheme ("color" themeColor=ThemeColor)?
		public Group getGroup() { return cGroup; }
		
		//"theme"
		public Keyword getThemeKeyword_0() { return cThemeKeyword_0; }
		
		//theme=BeamerTheme
		public Assignment getThemeAssignment_1() { return cThemeAssignment_1; }
		
		//BeamerTheme
		public RuleCall getThemeBeamerThemeParserRuleCall_1_0() { return cThemeBeamerThemeParserRuleCall_1_0; }
		
		//("color" themeColor=ThemeColor)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"color"
		public Keyword getColorKeyword_2_0() { return cColorKeyword_2_0; }
		
		//themeColor=ThemeColor
		public Assignment getThemeColorAssignment_2_1() { return cThemeColorAssignment_2_1; }
		
		//ThemeColor
		public RuleCall getThemeColorThemeColorParserRuleCall_2_1_0() { return cThemeColorThemeColorParserRuleCall_2_1_0; }
	}
	public class BeamerThemeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.BeamerTheme");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAnnArborKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAntibesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBergenKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBerkeleyKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBerlinKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBoadillaKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cBoxesKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCambridgeUSKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCopenhagenKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDarmstadtKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cDefaultKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cDresdenKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cFrankfurtKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cGoettingenKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cHannoverKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cIlmanauKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cJuanLesPinsKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cLuebeckKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cMadridKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cMalmoeKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cMarburgKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cMontpellierKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cPaloAltoKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cPittsburghKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cRochesterKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cSingaporeKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cSzegedKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cWarsawKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		
		//BeamerTheme:
		//	"AnnArbor" | "Antibes" | "Bergen" | "Berkeley" | "Berlin" | "Boadilla" | "boxes" | "CambridgeUS" | "Copenhagen" |
		//	"Darmstadt" | "default" | "Dresden" | "Frankfurt" | "Goettingen" | "Hannover" | "Ilmanau" | "JuanLesPins" | "Luebeck"
		//	| "Madrid" | "Malmoe" | "Marburg" | "Montpellier" | "PaloAlto" | "Pittsburgh" | "Rochester" | "Singapore" | "Szeged"
		//	| "Warsaw";
		@Override public ParserRule getRule() { return rule; }
		
		//"AnnArbor" | "Antibes" | "Bergen" | "Berkeley" | "Berlin" | "Boadilla" | "boxes" | "CambridgeUS" | "Copenhagen" |
		//"Darmstadt" | "default" | "Dresden" | "Frankfurt" | "Goettingen" | "Hannover" | "Ilmanau" | "JuanLesPins" | "Luebeck"
		//| "Madrid" | "Malmoe" | "Marburg" | "Montpellier" | "PaloAlto" | "Pittsburgh" | "Rochester" | "Singapore" | "Szeged" |
		//"Warsaw"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"AnnArbor"
		public Keyword getAnnArborKeyword_0() { return cAnnArborKeyword_0; }
		
		//"Antibes"
		public Keyword getAntibesKeyword_1() { return cAntibesKeyword_1; }
		
		//"Bergen"
		public Keyword getBergenKeyword_2() { return cBergenKeyword_2; }
		
		//"Berkeley"
		public Keyword getBerkeleyKeyword_3() { return cBerkeleyKeyword_3; }
		
		//"Berlin"
		public Keyword getBerlinKeyword_4() { return cBerlinKeyword_4; }
		
		//"Boadilla"
		public Keyword getBoadillaKeyword_5() { return cBoadillaKeyword_5; }
		
		//"boxes"
		public Keyword getBoxesKeyword_6() { return cBoxesKeyword_6; }
		
		//"CambridgeUS"
		public Keyword getCambridgeUSKeyword_7() { return cCambridgeUSKeyword_7; }
		
		//"Copenhagen"
		public Keyword getCopenhagenKeyword_8() { return cCopenhagenKeyword_8; }
		
		//"Darmstadt"
		public Keyword getDarmstadtKeyword_9() { return cDarmstadtKeyword_9; }
		
		//"default"
		public Keyword getDefaultKeyword_10() { return cDefaultKeyword_10; }
		
		//"Dresden"
		public Keyword getDresdenKeyword_11() { return cDresdenKeyword_11; }
		
		//"Frankfurt"
		public Keyword getFrankfurtKeyword_12() { return cFrankfurtKeyword_12; }
		
		//"Goettingen"
		public Keyword getGoettingenKeyword_13() { return cGoettingenKeyword_13; }
		
		//"Hannover"
		public Keyword getHannoverKeyword_14() { return cHannoverKeyword_14; }
		
		//"Ilmanau"
		public Keyword getIlmanauKeyword_15() { return cIlmanauKeyword_15; }
		
		//"JuanLesPins"
		public Keyword getJuanLesPinsKeyword_16() { return cJuanLesPinsKeyword_16; }
		
		//"Luebeck"
		public Keyword getLuebeckKeyword_17() { return cLuebeckKeyword_17; }
		
		//"Madrid"
		public Keyword getMadridKeyword_18() { return cMadridKeyword_18; }
		
		//"Malmoe"
		public Keyword getMalmoeKeyword_19() { return cMalmoeKeyword_19; }
		
		//"Marburg"
		public Keyword getMarburgKeyword_20() { return cMarburgKeyword_20; }
		
		//"Montpellier"
		public Keyword getMontpellierKeyword_21() { return cMontpellierKeyword_21; }
		
		//"PaloAlto"
		public Keyword getPaloAltoKeyword_22() { return cPaloAltoKeyword_22; }
		
		//"Pittsburgh"
		public Keyword getPittsburghKeyword_23() { return cPittsburghKeyword_23; }
		
		//"Rochester"
		public Keyword getRochesterKeyword_24() { return cRochesterKeyword_24; }
		
		//"Singapore"
		public Keyword getSingaporeKeyword_25() { return cSingaporeKeyword_25; }
		
		//"Szeged"
		public Keyword getSzegedKeyword_26() { return cSzegedKeyword_26; }
		
		//"Warsaw"
		public Keyword getWarsawKeyword_27() { return cWarsawKeyword_27; }
	}
	public class ThemeColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.ThemeColor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAlbatrosKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBeaverKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBeetleKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCraneKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDefaultKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDolphinKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDoveKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cFlyKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLilyKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOrchidKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cRoseKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cSeagullKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cSeahorseKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cSidebartabKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cStructureKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cWhaleKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cWolverineKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		
		//ThemeColor:
		//	"albatros" | "beaver" | "beetle" | "crane" | "default" | "dolphin" | "dove" | "fly" | "lily" | "orchid" | "rose" |
		//	"seagull" | "seahorse" | "sidebartab" | "structure" | "whale" | "wolverine";
		@Override public ParserRule getRule() { return rule; }
		
		//"albatros" | "beaver" | "beetle" | "crane" | "default" | "dolphin" | "dove" | "fly" | "lily" | "orchid" | "rose" |
		//"seagull" | "seahorse" | "sidebartab" | "structure" | "whale" | "wolverine"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"albatros"
		public Keyword getAlbatrosKeyword_0() { return cAlbatrosKeyword_0; }
		
		//"beaver"
		public Keyword getBeaverKeyword_1() { return cBeaverKeyword_1; }
		
		//"beetle"
		public Keyword getBeetleKeyword_2() { return cBeetleKeyword_2; }
		
		//"crane"
		public Keyword getCraneKeyword_3() { return cCraneKeyword_3; }
		
		//"default"
		public Keyword getDefaultKeyword_4() { return cDefaultKeyword_4; }
		
		//"dolphin"
		public Keyword getDolphinKeyword_5() { return cDolphinKeyword_5; }
		
		//"dove"
		public Keyword getDoveKeyword_6() { return cDoveKeyword_6; }
		
		//"fly"
		public Keyword getFlyKeyword_7() { return cFlyKeyword_7; }
		
		//"lily"
		public Keyword getLilyKeyword_8() { return cLilyKeyword_8; }
		
		//"orchid"
		public Keyword getOrchidKeyword_9() { return cOrchidKeyword_9; }
		
		//"rose"
		public Keyword getRoseKeyword_10() { return cRoseKeyword_10; }
		
		//"seagull"
		public Keyword getSeagullKeyword_11() { return cSeagullKeyword_11; }
		
		//"seahorse"
		public Keyword getSeahorseKeyword_12() { return cSeahorseKeyword_12; }
		
		//"sidebartab"
		public Keyword getSidebartabKeyword_13() { return cSidebartabKeyword_13; }
		
		//"structure"
		public Keyword getStructureKeyword_14() { return cStructureKeyword_14; }
		
		//"whale"
		public Keyword getWhaleKeyword_15() { return cWhaleKeyword_15; }
		
		//"wolverine"
		public Keyword getWolverineKeyword_16() { return cWolverineKeyword_16; }
	}
	public class AuthorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Authors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAuthorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesSTRINGTerminalRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamesSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cNamesAssignment_2_1.eContents().get(0);
		
		//Authors:
		//	"author" names+=STRING (',' names+=STRING)*;
		@Override public ParserRule getRule() { return rule; }
		
		//"author" names+=STRING (',' names+=STRING)*
		public Group getGroup() { return cGroup; }
		
		//"author"
		public Keyword getAuthorKeyword_0() { return cAuthorKeyword_0; }
		
		//names+=STRING
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }
		
		//STRING
		public RuleCall getNamesSTRINGTerminalRuleCall_1_0() { return cNamesSTRINGTerminalRuleCall_1_0; }
		
		//(',' names+=STRING)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//names+=STRING
		public Assignment getNamesAssignment_2_1() { return cNamesAssignment_2_1; }
		
		//STRING
		public RuleCall getNamesSTRINGTerminalRuleCall_2_1_0() { return cNamesSTRINGTerminalRuleCall_2_1_0; }
	}
	public class InstituteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Institute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstituteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Institute:
		//	"institute" name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"institute" name=STRING
		public Group getGroup() { return cGroup; }
		
		//"institute"
		public Keyword getInstituteKeyword_0() { return cInstituteKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDateSTRINGTerminalRuleCall_1_0 = (RuleCall)cDateAssignment_1.eContents().get(0);
		
		//Date:
		//	"date" date=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"date" date=STRING
		public Group getGroup() { return cGroup; }
		
		//"date"
		public Keyword getDateKeyword_0() { return cDateKeyword_0; }
		
		//date=STRING
		public Assignment getDateAssignment_1() { return cDateAssignment_1; }
		
		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_1_0() { return cDateSTRINGTerminalRuleCall_1_0; }
	}
	public class SlideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Slide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSlideKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cSectionParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_1_0 = (RuleCall)cNameAssignment_1_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentsContentParserRuleCall_3_0 = (RuleCall)cContentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Slide:
		//	"slide" (Section name=STRING | name=STRING)? "{" contents+=Content+ "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"slide" (Section name=STRING | name=STRING)? "{" contents+=Content+ "}"
		public Group getGroup() { return cGroup; }
		
		//"slide"
		public Keyword getSlideKeyword_0() { return cSlideKeyword_0; }
		
		//(Section name=STRING | name=STRING)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Section name=STRING
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Section
		public RuleCall getSectionParserRuleCall_1_0_0() { return cSectionParserRuleCall_1_0_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1_0_1() { return cNameAssignment_1_0_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_1_0() { return cNameSTRINGTerminalRuleCall_1_0_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_1_0() { return cNameSTRINGTerminalRuleCall_1_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//contents+=Content+
		public Assignment getContentsAssignment_3() { return cContentsAssignment_3; }
		
		//Content
		public RuleCall getContentsContentParserRuleCall_3_0() { return cContentsContentParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Section");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSecAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSubSecAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSubSubSecAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cAsteriskAsteriskAsteriskKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Section:
		//	{Sec} "*" | {SubSec} "**" | {SubSubSec} "***";
		@Override public ParserRule getRule() { return rule; }
		
		//{Sec} "*" | {SubSec} "**" | {SubSubSec} "***"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Sec} "*"
		public Group getGroup_0() { return cGroup_0; }
		
		//{Sec}
		public Action getSecAction_0_0() { return cSecAction_0_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }
		
		//{SubSec} "**"
		public Group getGroup_1() { return cGroup_1; }
		
		//{SubSec}
		public Action getSubSecAction_1_0() { return cSubSecAction_1_0; }
		
		//"**"
		public Keyword getAsteriskAsteriskKeyword_1_1() { return cAsteriskAsteriskKeyword_1_1; }
		
		//{SubSubSec} "***"
		public Group getGroup_2() { return cGroup_2; }
		
		//{SubSubSec}
		public Action getSubSubSecAction_2_0() { return cSubSubSecAction_2_0; }
		
		//"***"
		public Keyword getAsteriskAsteriskAsteriskKeyword_2_1() { return cAsteriskAsteriskAsteriskKeyword_2_1; }
	}
	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Content");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTOCAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cToCKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFloatParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Content:
		//	{TOC} "ToC" | Text | List | Float;
		@Override public ParserRule getRule() { return rule; }
		
		//{TOC} "ToC" | Text | List | Float
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TOC} "ToC"
		public Group getGroup_0() { return cGroup_0; }
		
		//{TOC}
		public Action getTOCAction_0_0() { return cTOCAction_0_0; }
		
		//"ToC"
		public Keyword getToCKeyword_0_1() { return cToCKeyword_0_1; }
		
		//Text
		public RuleCall getTextParserRuleCall_1() { return cTextParserRuleCall_1; }
		
		//List
		public RuleCall getListParserRuleCall_2() { return cListParserRuleCall_2; }
		
		//Float
		public RuleCall getFloatParserRuleCall_3() { return cFloatParserRuleCall_3; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Text");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParagraphAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTextAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cTextAssignment_0_2.eContents().get(0);
		private final RuleCall cClickParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBlockAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBlockKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cTextAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_4_0 = (RuleCall)cTextAssignment_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final RuleCall cClickParserRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		
		//Text:
		//	{Paragraph} ">" text=STRING Click? | {Block} "block" name=STRING? "{" text=STRING "}" Click?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Paragraph} ">" text=STRING Click? | {Block} "block" name=STRING? "{" text=STRING "}" Click?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Paragraph} ">" text=STRING Click?
		public Group getGroup_0() { return cGroup_0; }
		
		//{Paragraph}
		public Action getParagraphAction_0_0() { return cParagraphAction_0_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_0_1() { return cGreaterThanSignKeyword_0_1; }
		
		//text=STRING
		public Assignment getTextAssignment_0_2() { return cTextAssignment_0_2; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0_2_0() { return cTextSTRINGTerminalRuleCall_0_2_0; }
		
		//Click?
		public RuleCall getClickParserRuleCall_0_3() { return cClickParserRuleCall_0_3; }
		
		//{Block} "block" name=STRING? "{" text=STRING "}" Click?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Block}
		public Action getBlockAction_1_0() { return cBlockAction_1_0; }
		
		//"block"
		public Keyword getBlockKeyword_1_1() { return cBlockKeyword_1_1; }
		
		//name=STRING?
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_2_0() { return cNameSTRINGTerminalRuleCall_1_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_3() { return cLeftCurlyBracketKeyword_1_3; }
		
		//text=STRING
		public Assignment getTextAssignment_1_4() { return cTextAssignment_1_4; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_4_0() { return cTextSTRINGTerminalRuleCall_1_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
		
		//Click?
		public RuleCall getClickParserRuleCall_1_6() { return cClickParserRuleCall_1_6; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.List");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumberedListAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cListKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cListItemsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cListItemsNumberedListItemParserRuleCall_0_2_0 = (RuleCall)cListItemsAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnNumberedListAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cListKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cListItemsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cListItemsUnNumberedListItemParserRuleCall_1_2_0 = (RuleCall)cListItemsAssignment_1_2.eContents().get(0);
		
		//List:
		//	{NumberedList} "#list" ListItems+=NumberedListItem+ | {UnNumberedList} "-list" ListItems+=UnNumberedListItem+;
		@Override public ParserRule getRule() { return rule; }
		
		//{NumberedList} "#list" ListItems+=NumberedListItem+ | {UnNumberedList} "-list" ListItems+=UnNumberedListItem+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NumberedList} "#list" ListItems+=NumberedListItem+
		public Group getGroup_0() { return cGroup_0; }
		
		//{NumberedList}
		public Action getNumberedListAction_0_0() { return cNumberedListAction_0_0; }
		
		//"#list"
		public Keyword getListKeyword_0_1() { return cListKeyword_0_1; }
		
		//ListItems+=NumberedListItem+
		public Assignment getListItemsAssignment_0_2() { return cListItemsAssignment_0_2; }
		
		//NumberedListItem
		public RuleCall getListItemsNumberedListItemParserRuleCall_0_2_0() { return cListItemsNumberedListItemParserRuleCall_0_2_0; }
		
		//{UnNumberedList} "-list" ListItems+=UnNumberedListItem+
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnNumberedList}
		public Action getUnNumberedListAction_1_0() { return cUnNumberedListAction_1_0; }
		
		//"-list"
		public Keyword getListKeyword_1_1() { return cListKeyword_1_1; }
		
		//ListItems+=UnNumberedListItem+
		public Assignment getListItemsAssignment_1_2() { return cListItemsAssignment_1_2; }
		
		//UnNumberedListItem
		public RuleCall getListItemsUnNumberedListItemParserRuleCall_1_2_0() { return cListItemsUnNumberedListItemParserRuleCall_1_2_0; }
	}
	public class NumberedListItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.NumberedListItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemSTRINGTerminalRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		private final RuleCall cClickParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//NumberedListItem:
		//	"##" item=STRING Click?;
		@Override public ParserRule getRule() { return rule; }
		
		//"##" item=STRING Click?
		public Group getGroup() { return cGroup; }
		
		//"##"
		public Keyword getNumberSignNumberSignKeyword_0() { return cNumberSignNumberSignKeyword_0; }
		
		//item=STRING
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }
		
		//STRING
		public RuleCall getItemSTRINGTerminalRuleCall_1_0() { return cItemSTRINGTerminalRuleCall_1_0; }
		
		//Click?
		public RuleCall getClickParserRuleCall_2() { return cClickParserRuleCall_2; }
	}
	public class UnNumberedListItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.UnNumberedListItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemSTRINGTerminalRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		private final RuleCall cClickParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//UnNumberedListItem:
		//	"--" item=STRING Click?;
		@Override public ParserRule getRule() { return rule; }
		
		//"--" item=STRING Click?
		public Group getGroup() { return cGroup; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_0() { return cHyphenMinusHyphenMinusKeyword_0; }
		
		//item=STRING
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }
		
		//STRING
		public RuleCall getItemSTRINGTerminalRuleCall_1_0() { return cItemSTRINGTerminalRuleCall_1_0; }
		
		//Click?
		public RuleCall getClickParserRuleCall_2() { return cClickParserRuleCall_2; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Float");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Float:
		//	Image | Table;
		@Override public ParserRule getRule() { return rule; }
		
		//Image | Table
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Image
		public RuleCall getImageParserRuleCall_0() { return cImageParserRuleCall_0; }
		
		//Table
		public RuleCall getTableParserRuleCall_1() { return cTableParserRuleCall_1; }
	}
	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSrcKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSrcAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSrcSTRINGTerminalRuleCall_3_0 = (RuleCall)cSrcAssignment_3.eContents().get(0);
		private final Assignment cAlignmentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAlignmentAlignmentParserRuleCall_4_0 = (RuleCall)cAlignmentAssignment_4.eContents().get(0);
		private final Assignment cSizeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSizeSizeParserRuleCall_5_0 = (RuleCall)cSizeAssignment_5.eContents().get(0);
		private final RuleCall cClickParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Image:
		//	"img" name=ID "src" src=STRING alignment=Alignment? size=Size Click?;
		@Override public ParserRule getRule() { return rule; }
		
		//"img" name=ID "src" src=STRING alignment=Alignment? size=Size Click?
		public Group getGroup() { return cGroup; }
		
		//"img"
		public Keyword getImgKeyword_0() { return cImgKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"src"
		public Keyword getSrcKeyword_2() { return cSrcKeyword_2; }
		
		//src=STRING
		public Assignment getSrcAssignment_3() { return cSrcAssignment_3; }
		
		//STRING
		public RuleCall getSrcSTRINGTerminalRuleCall_3_0() { return cSrcSTRINGTerminalRuleCall_3_0; }
		
		//alignment=Alignment?
		public Assignment getAlignmentAssignment_4() { return cAlignmentAssignment_4; }
		
		//Alignment
		public RuleCall getAlignmentAlignmentParserRuleCall_4_0() { return cAlignmentAlignmentParserRuleCall_4_0; }
		
		//size=Size
		public Assignment getSizeAssignment_5() { return cSizeAssignment_5; }
		
		//Size
		public RuleCall getSizeSizeParserRuleCall_5_0() { return cSizeSizeParserRuleCall_5_0; }
		
		//Click?
		public RuleCall getClickParserRuleCall_6() { return cClickParserRuleCall_6; }
	}
	public class AlignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Alignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTopleftKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTopKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cToprightKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLeftKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCenterKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cRightKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cBottomleftKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cBottomKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBottomrightKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//Alignment:
		//	"topleft" | "top" | "topright" | "left" | "center" | "right" | "bottomleft" | "bottom" | "bottomright";
		@Override public ParserRule getRule() { return rule; }
		
		//"topleft" | "top" | "topright" | "left" | "center" | "right" | "bottomleft" | "bottom" | "bottomright"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"topleft"
		public Keyword getTopleftKeyword_0() { return cTopleftKeyword_0; }
		
		//"top"
		public Keyword getTopKeyword_1() { return cTopKeyword_1; }
		
		//"topright"
		public Keyword getToprightKeyword_2() { return cToprightKeyword_2; }
		
		//"left"
		public Keyword getLeftKeyword_3() { return cLeftKeyword_3; }
		
		//"center"
		public Keyword getCenterKeyword_4() { return cCenterKeyword_4; }
		
		//"right"
		public Keyword getRightKeyword_5() { return cRightKeyword_5; }
		
		//"bottomleft"
		public Keyword getBottomleftKeyword_6() { return cBottomleftKeyword_6; }
		
		//"bottom"
		public Keyword getBottomKeyword_7() { return cBottomKeyword_7; }
		
		//"bottomright"
		public Keyword getBottomrightKeyword_8() { return cBottomrightKeyword_8; }
	}
	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cWidthKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHeightKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cScaleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScaleINTTerminalRuleCall_1_0 = (RuleCall)cScaleAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Size:
		//	("width" | "height") scale=INT "%";
		@Override public ParserRule getRule() { return rule; }
		
		//("width" | "height") scale=INT "%"
		public Group getGroup() { return cGroup; }
		
		//"width" | "height"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"width"
		public Keyword getWidthKeyword_0_0() { return cWidthKeyword_0_0; }
		
		//"height"
		public Keyword getHeightKeyword_0_1() { return cHeightKeyword_0_1; }
		
		//scale=INT
		public Assignment getScaleAssignment_1() { return cScaleAssignment_1; }
		
		//INT
		public RuleCall getScaleINTTerminalRuleCall_1_0() { return cScaleINTTerminalRuleCall_1_0; }
		
		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTabKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRowsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowsTableRowParserRuleCall_3_0 = (RuleCall)cRowsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRowsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRowsTableRowParserRuleCall_4_1_0 = (RuleCall)cRowsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Table:
		//	"tab" name=ID "[" rows+=TableRow ("," rows+=TableRow)* "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"tab" name=ID "[" rows+=TableRow ("," rows+=TableRow)* "]"
		public Group getGroup() { return cGroup; }
		
		//"tab"
		public Keyword getTabKeyword_0() { return cTabKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//rows+=TableRow
		public Assignment getRowsAssignment_3() { return cRowsAssignment_3; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_3_0() { return cRowsTableRowParserRuleCall_3_0; }
		
		//("," rows+=TableRow)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//rows+=TableRow
		public Assignment getRowsAssignment_4_1() { return cRowsAssignment_4_1; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_4_1_0() { return cRowsTableRowParserRuleCall_4_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class TableRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.TableRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TableRow:
		//	"[" values+=STRING ("," values+=STRING)* "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" values+=STRING ("," values+=STRING)* "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_1_0() { return cValuesSTRINGTerminalRuleCall_1_0; }
		
		//("," values+=STRING)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_1_0() { return cValuesSTRINGTerminalRuleCall_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Click");
		private final Keyword cDollarSignDollarSignKeyword = (Keyword)rule.eContents().get(1);
		
		//Click:
		//	"$$";
		@Override public ParserRule getRule() { return rule; }
		
		//"$$"
		public Keyword getDollarSignDollarSignKeyword() { return cDollarSignDollarSignKeyword; }
	}
	public class AnimationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.Animation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnimateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetFloatCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetFloatIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetFloatCrossReference_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAnimationTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLocationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLocationAlignmentParserRuleCall_4_0 = (RuleCall)cLocationAssignment_4.eContents().get(0);
		private final Assignment cSizeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSizeSizeParserRuleCall_5_0 = (RuleCall)cSizeAssignment_5.eContents().get(0);
		
		//Animation:
		//	"animate" target=[Float] type=AnimationType "to" location=Alignment size=Size?;
		@Override public ParserRule getRule() { return rule; }
		
		//"animate" target=[Float] type=AnimationType "to" location=Alignment size=Size?
		public Group getGroup() { return cGroup; }
		
		//"animate"
		public Keyword getAnimateKeyword_0() { return cAnimateKeyword_0; }
		
		//target=[Float]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[Float]
		public CrossReference getTargetFloatCrossReference_1_0() { return cTargetFloatCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetFloatIDTerminalRuleCall_1_0_1() { return cTargetFloatIDTerminalRuleCall_1_0_1; }
		
		//type=AnimationType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//AnimationType
		public RuleCall getTypeAnimationTypeParserRuleCall_2_0() { return cTypeAnimationTypeParserRuleCall_2_0; }
		
		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//location=Alignment
		public Assignment getLocationAssignment_4() { return cLocationAssignment_4; }
		
		//Alignment
		public RuleCall getLocationAlignmentParserRuleCall_4_0() { return cLocationAlignmentParserRuleCall_4_0; }
		
		//size=Size?
		public Assignment getSizeAssignment_5() { return cSizeAssignment_5; }
		
		//Size
		public RuleCall getSizeSizeParserRuleCall_5_0() { return cSizeSizeParserRuleCall_5_0; }
	}
	public class AnimationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic.AnimationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMoveAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cMoveKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cJumpAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cJumpKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//AnimationType:
		//	{Move} "move" | {Jump} "jump";
		@Override public ParserRule getRule() { return rule; }
		
		//{Move} "move" | {Jump} "jump"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Move} "move"
		public Group getGroup_0() { return cGroup_0; }
		
		//{Move}
		public Action getMoveAction_0_0() { return cMoveAction_0_0; }
		
		//"move"
		public Keyword getMoveKeyword_0_1() { return cMoveKeyword_0_1; }
		
		//{Jump} "jump"
		public Group getGroup_1() { return cGroup_1; }
		
		//{Jump}
		public Action getJumpAction_1_0() { return cJumpAction_1_0; }
		
		//"jump"
		public Keyword getJumpKeyword_1_1() { return cJumpKeyword_1_1; }
	}
	
	
	private final PresentationElements pPresentation;
	private final ThemeElements pTheme;
	private final BeamerThemeElements pBeamerTheme;
	private final ThemeColorElements pThemeColor;
	private final AuthorsElements pAuthors;
	private final InstituteElements pInstitute;
	private final DateElements pDate;
	private final SlideElements pSlide;
	private final SectionElements pSection;
	private final ContentElements pContent;
	private final TextElements pText;
	private final ListElements pList;
	private final NumberedListItemElements pNumberedListItem;
	private final UnNumberedListItemElements pUnNumberedListItem;
	private final FloatElements pFloat;
	private final ImageElements pImage;
	private final AlignmentElements pAlignment;
	private final SizeElements pSize;
	private final TableElements pTable;
	private final TableRowElements pTableRow;
	private final ClickElements pClick;
	private final AnimationElements pAnimation;
	private final AnimationTypeElements pAnimationType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SlideOMaticGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPresentation = new PresentationElements();
		this.pTheme = new ThemeElements();
		this.pBeamerTheme = new BeamerThemeElements();
		this.pThemeColor = new ThemeColorElements();
		this.pAuthors = new AuthorsElements();
		this.pInstitute = new InstituteElements();
		this.pDate = new DateElements();
		this.pSlide = new SlideElements();
		this.pSection = new SectionElements();
		this.pContent = new ContentElements();
		this.pText = new TextElements();
		this.pList = new ListElements();
		this.pNumberedListItem = new NumberedListItemElements();
		this.pUnNumberedListItem = new UnNumberedListItemElements();
		this.pFloat = new FloatElements();
		this.pImage = new ImageElements();
		this.pAlignment = new AlignmentElements();
		this.pSize = new SizeElements();
		this.pTable = new TableElements();
		this.pTableRow = new TableRowElements();
		this.pClick = new ClickElements();
		this.pAnimation = new AnimationElements();
		this.pAnimationType = new AnimationTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Project Extension is '.slide'
	//Presentation:
	//	"presentation" name=STRING "{" ("(" theme=Theme? authors=Authors? institute=Institute? date=Date? ")")?
	//	(slides+=Slide | animations+=Animation)* "}";
	public PresentationElements getPresentationAccess() {
		return pPresentation;
	}
	
	public ParserRule getPresentationRule() {
		return getPresentationAccess().getRule();
	}
	
	//Theme:
	//	"theme" theme=BeamerTheme ("color" themeColor=ThemeColor)?;
	public ThemeElements getThemeAccess() {
		return pTheme;
	}
	
	public ParserRule getThemeRule() {
		return getThemeAccess().getRule();
	}
	
	//BeamerTheme:
	//	"AnnArbor" | "Antibes" | "Bergen" | "Berkeley" | "Berlin" | "Boadilla" | "boxes" | "CambridgeUS" | "Copenhagen" |
	//	"Darmstadt" | "default" | "Dresden" | "Frankfurt" | "Goettingen" | "Hannover" | "Ilmanau" | "JuanLesPins" | "Luebeck"
	//	| "Madrid" | "Malmoe" | "Marburg" | "Montpellier" | "PaloAlto" | "Pittsburgh" | "Rochester" | "Singapore" | "Szeged"
	//	| "Warsaw";
	public BeamerThemeElements getBeamerThemeAccess() {
		return pBeamerTheme;
	}
	
	public ParserRule getBeamerThemeRule() {
		return getBeamerThemeAccess().getRule();
	}
	
	//ThemeColor:
	//	"albatros" | "beaver" | "beetle" | "crane" | "default" | "dolphin" | "dove" | "fly" | "lily" | "orchid" | "rose" |
	//	"seagull" | "seahorse" | "sidebartab" | "structure" | "whale" | "wolverine";
	public ThemeColorElements getThemeColorAccess() {
		return pThemeColor;
	}
	
	public ParserRule getThemeColorRule() {
		return getThemeColorAccess().getRule();
	}
	
	//Authors:
	//	"author" names+=STRING (',' names+=STRING)*;
	public AuthorsElements getAuthorsAccess() {
		return pAuthors;
	}
	
	public ParserRule getAuthorsRule() {
		return getAuthorsAccess().getRule();
	}
	
	//Institute:
	//	"institute" name=STRING;
	public InstituteElements getInstituteAccess() {
		return pInstitute;
	}
	
	public ParserRule getInstituteRule() {
		return getInstituteAccess().getRule();
	}
	
	//Date:
	//	"date" date=STRING;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//Slide:
	//	"slide" (Section name=STRING | name=STRING)? "{" contents+=Content+ "}";
	public SlideElements getSlideAccess() {
		return pSlide;
	}
	
	public ParserRule getSlideRule() {
		return getSlideAccess().getRule();
	}
	
	//Section:
	//	{Sec} "*" | {SubSec} "**" | {SubSubSec} "***";
	public SectionElements getSectionAccess() {
		return pSection;
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}
	
	//Content:
	//	{TOC} "ToC" | Text | List | Float;
	public ContentElements getContentAccess() {
		return pContent;
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//Text:
	//	{Paragraph} ">" text=STRING Click? | {Block} "block" name=STRING? "{" text=STRING "}" Click?;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//List:
	//	{NumberedList} "#list" ListItems+=NumberedListItem+ | {UnNumberedList} "-list" ListItems+=UnNumberedListItem+;
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//NumberedListItem:
	//	"##" item=STRING Click?;
	public NumberedListItemElements getNumberedListItemAccess() {
		return pNumberedListItem;
	}
	
	public ParserRule getNumberedListItemRule() {
		return getNumberedListItemAccess().getRule();
	}
	
	//UnNumberedListItem:
	//	"--" item=STRING Click?;
	public UnNumberedListItemElements getUnNumberedListItemAccess() {
		return pUnNumberedListItem;
	}
	
	public ParserRule getUnNumberedListItemRule() {
		return getUnNumberedListItemAccess().getRule();
	}
	
	//Float:
	//	Image | Table;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//Image:
	//	"img" name=ID "src" src=STRING alignment=Alignment? size=Size Click?;
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}
	
	//Alignment:
	//	"topleft" | "top" | "topright" | "left" | "center" | "right" | "bottomleft" | "bottom" | "bottomright";
	public AlignmentElements getAlignmentAccess() {
		return pAlignment;
	}
	
	public ParserRule getAlignmentRule() {
		return getAlignmentAccess().getRule();
	}
	
	//Size:
	//	("width" | "height") scale=INT "%";
	public SizeElements getSizeAccess() {
		return pSize;
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}
	
	//Table:
	//	"tab" name=ID "[" rows+=TableRow ("," rows+=TableRow)* "]";
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//TableRow:
	//	"[" values+=STRING ("," values+=STRING)* "]";
	public TableRowElements getTableRowAccess() {
		return pTableRow;
	}
	
	public ParserRule getTableRowRule() {
		return getTableRowAccess().getRule();
	}
	
	//Click:
	//	"$$";
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}
	
	//Animation:
	//	"animate" target=[Float] type=AnimationType "to" location=Alignment size=Size?;
	public AnimationElements getAnimationAccess() {
		return pAnimation;
	}
	
	public ParserRule getAnimationRule() {
		return getAnimationAccess().getRule();
	}
	
	//AnimationType:
	//	{Move} "move" | {Jump} "jump";
	public AnimationTypeElements getAnimationTypeAccess() {
		return pAnimationType;
	}
	
	public ParserRule getAnimationTypeRule() {
		return getAnimationTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
