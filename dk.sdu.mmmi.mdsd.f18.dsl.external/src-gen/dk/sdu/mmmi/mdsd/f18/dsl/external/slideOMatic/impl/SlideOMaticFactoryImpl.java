/**
 * generated by Xtext 2.13.0
 */
package dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.impl;

import dk.sdu.mmmi.mdsd.f18.dsl.external.slideOMatic.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SlideOMaticFactoryImpl extends EFactoryImpl implements SlideOMaticFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SlideOMaticFactory init()
  {
    try
    {
      SlideOMaticFactory theSlideOMaticFactory = (SlideOMaticFactory)EPackage.Registry.INSTANCE.getEFactory(SlideOMaticPackage.eNS_URI);
      if (theSlideOMaticFactory != null)
      {
        return theSlideOMaticFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SlideOMaticFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SlideOMaticFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SlideOMaticPackage.PRESENTATION: return createPresentation();
      case SlideOMaticPackage.THEME: return createTheme();
      case SlideOMaticPackage.AUTHORS: return createAuthors();
      case SlideOMaticPackage.INSTITUTE: return createInstitute();
      case SlideOMaticPackage.DATE: return createDate();
      case SlideOMaticPackage.SLIDE: return createSlide();
      case SlideOMaticPackage.SECTION: return createSection();
      case SlideOMaticPackage.CONTENT: return createContent();
      case SlideOMaticPackage.TO_C: return createToC();
      case SlideOMaticPackage.TEXT: return createText();
      case SlideOMaticPackage.TEXT_TYPE: return createTextType();
      case SlideOMaticPackage.BLOCK: return createBlock();
      case SlideOMaticPackage.LIST: return createList();
      case SlideOMaticPackage.NUMBERED_LIST: return createNumberedList();
      case SlideOMaticPackage.UN_NUMBERED_LIST: return createUnNumberedList();
      case SlideOMaticPackage.LIST_ITEM: return createListItem();
      case SlideOMaticPackage.IMAGE: return createImage();
      case SlideOMaticPackage.SHOW_IMAGE: return createShowImage();
      case SlideOMaticPackage.SIZE: return createSize();
      case SlideOMaticPackage.WAY: return createWay();
      case SlideOMaticPackage.TABLE: return createTable();
      case SlideOMaticPackage.TABLE_ROW: return createTableRow();
      case SlideOMaticPackage.CODE: return createCode();
      case SlideOMaticPackage.LINE_SEQUENCE: return createLineSequence();
      case SlideOMaticPackage.ANIMATION: return createAnimation();
      case SlideOMaticPackage.MATH_EXP: return createMathExp();
      case SlideOMaticPackage.EXPRESSION: return createExpression();
      case SlideOMaticPackage.COMPILE_DATE: return createCompileDate();
      case SlideOMaticPackage.SEC: return createSec();
      case SlideOMaticPackage.SUB_SEC: return createSubSec();
      case SlideOMaticPackage.SUB_SUB_SEC: return createSubSubSec();
      case SlideOMaticPackage.CURRENT_SEC_TO_C: return createCurrentSecToC();
      case SlideOMaticPackage.BOLD: return createBold();
      case SlideOMaticPackage.ITALIC: return createItalic();
      case SlideOMaticPackage.UNDERLINE: return createUnderline();
      case SlideOMaticPackage.FOOT_NOTE: return createFootNote();
      case SlideOMaticPackage.URL: return createURL();
      case SlideOMaticPackage.PROPORTIONAL_SIZE: return createProportionalSize();
      case SlideOMaticPackage.EXACT_SIZE: return createExactSize();
      case SlideOMaticPackage.WIDTH: return createWidth();
      case SlideOMaticPackage.HEIGHT: return createHeight();
      case SlideOMaticPackage.INLINE_CODE: return createInlineCode();
      case SlideOMaticPackage.FILE_CODE: return createFileCode();
      case SlideOMaticPackage.PLUS: return createPlus();
      case SlideOMaticPackage.MINUS: return createMinus();
      case SlideOMaticPackage.MULT: return createMult();
      case SlideOMaticPackage.DIV: return createDiv();
      case SlideOMaticPackage.POW: return createPow();
      case SlideOMaticPackage.VAR: return createVar();
      case SlideOMaticPackage.LET: return createLet();
      case SlideOMaticPackage.NUM: return createNum();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Presentation createPresentation()
  {
    PresentationImpl presentation = new PresentationImpl();
    return presentation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Theme createTheme()
  {
    ThemeImpl theme = new ThemeImpl();
    return theme;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Authors createAuthors()
  {
    AuthorsImpl authors = new AuthorsImpl();
    return authors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Institute createInstitute()
  {
    InstituteImpl institute = new InstituteImpl();
    return institute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Date createDate()
  {
    DateImpl date = new DateImpl();
    return date;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Slide createSlide()
  {
    SlideImpl slide = new SlideImpl();
    return slide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Section createSection()
  {
    SectionImpl section = new SectionImpl();
    return section;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Content createContent()
  {
    ContentImpl content = new ContentImpl();
    return content;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ToC createToC()
  {
    ToCImpl toC = new ToCImpl();
    return toC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Text createText()
  {
    TextImpl text = new TextImpl();
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TextType createTextType()
  {
    TextTypeImpl textType = new TextTypeImpl();
    return textType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumberedList createNumberedList()
  {
    NumberedListImpl numberedList = new NumberedListImpl();
    return numberedList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnNumberedList createUnNumberedList()
  {
    UnNumberedListImpl unNumberedList = new UnNumberedListImpl();
    return unNumberedList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListItem createListItem()
  {
    ListItemImpl listItem = new ListItemImpl();
    return listItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Image createImage()
  {
    ImageImpl image = new ImageImpl();
    return image;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ShowImage createShowImage()
  {
    ShowImageImpl showImage = new ShowImageImpl();
    return showImage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Size createSize()
  {
    SizeImpl size = new SizeImpl();
    return size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Way createWay()
  {
    WayImpl way = new WayImpl();
    return way;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Table createTable()
  {
    TableImpl table = new TableImpl();
    return table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TableRow createTableRow()
  {
    TableRowImpl tableRow = new TableRowImpl();
    return tableRow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Code createCode()
  {
    CodeImpl code = new CodeImpl();
    return code;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LineSequence createLineSequence()
  {
    LineSequenceImpl lineSequence = new LineSequenceImpl();
    return lineSequence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Animation createAnimation()
  {
    AnimationImpl animation = new AnimationImpl();
    return animation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MathExp createMathExp()
  {
    MathExpImpl mathExp = new MathExpImpl();
    return mathExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompileDate createCompileDate()
  {
    CompileDateImpl compileDate = new CompileDateImpl();
    return compileDate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Sec createSec()
  {
    SecImpl sec = new SecImpl();
    return sec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SubSec createSubSec()
  {
    SubSecImpl subSec = new SubSecImpl();
    return subSec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SubSubSec createSubSubSec()
  {
    SubSubSecImpl subSubSec = new SubSubSecImpl();
    return subSubSec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CurrentSecToC createCurrentSecToC()
  {
    CurrentSecToCImpl currentSecToC = new CurrentSecToCImpl();
    return currentSecToC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bold createBold()
  {
    BoldImpl bold = new BoldImpl();
    return bold;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Italic createItalic()
  {
    ItalicImpl italic = new ItalicImpl();
    return italic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Underline createUnderline()
  {
    UnderlineImpl underline = new UnderlineImpl();
    return underline;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FootNote createFootNote()
  {
    FootNoteImpl footNote = new FootNoteImpl();
    return footNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public URL createURL()
  {
    URLImpl url = new URLImpl();
    return url;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProportionalSize createProportionalSize()
  {
    ProportionalSizeImpl proportionalSize = new ProportionalSizeImpl();
    return proportionalSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExactSize createExactSize()
  {
    ExactSizeImpl exactSize = new ExactSizeImpl();
    return exactSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Width createWidth()
  {
    WidthImpl width = new WidthImpl();
    return width;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Height createHeight()
  {
    HeightImpl height = new HeightImpl();
    return height;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InlineCode createInlineCode()
  {
    InlineCodeImpl inlineCode = new InlineCodeImpl();
    return inlineCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FileCode createFileCode()
  {
    FileCodeImpl fileCode = new FileCodeImpl();
    return fileCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mult createMult()
  {
    MultImpl mult = new MultImpl();
    return mult;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Div createDiv()
  {
    DivImpl div = new DivImpl();
    return div;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pow createPow()
  {
    PowImpl pow = new PowImpl();
    return pow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Let createLet()
  {
    LetImpl let = new LetImpl();
    return let;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Num createNum()
  {
    NumImpl num = new NumImpl();
    return num;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SlideOMaticPackage getSlideOMaticPackage()
  {
    return (SlideOMaticPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SlideOMaticPackage getPackage()
  {
    return SlideOMaticPackage.eINSTANCE;
  }

} //SlideOMaticFactoryImpl
