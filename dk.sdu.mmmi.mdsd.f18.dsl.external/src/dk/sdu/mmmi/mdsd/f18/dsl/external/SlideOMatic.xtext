grammar dk.sdu.mmmi.mdsd.f18.dsl.external.SlideOMatic with org.eclipse.xtext.common.Terminals

generate slideOMatic "http://www.sdu.dk/mmmi/mdsd/f18/dsl/external/SlideOMatic"

// Project Extension is '.slide'
Presentation:
	"presentation" name=STRING (subtitle=STRING)? "{" ("(" (theme=Theme)? (authors=Authors)? (institute=Institute)?
	(date=Date)? ")")?
	(slides+=Slide |
	images+=Image)*
	 "}";

Theme:
	"theme" theme=BeamerTheme ("color" themeColor=ThemeColor)?;

BeamerTheme:
	"AnnArbor" | "Antibes" | "Bergen" | "Berkeley" | "Berlin" | "Boadilla" | "boxes" | "CambridgeUS" | "Copenhagen" |
	"Darmstadt" | "default" | "Dresden" | "Frankfurt" | "Goettingen" | "Hannover" | "Ilmanau" | "JuanLesPins" | "Luebeck"
	| "Madrid" | "Malmoe" | "Marburg" | "Montpellier" | "PaloAlto" | "Pittsburgh" | "Rochester" | "Singapore" | "Szeged"
	| "Warsaw";

ThemeColor:
	"albatros" | "beaver" | "beetle" | "crane" | "default" | "dolphin" | "dove" | "fly" | "lily" | "orchid" | "rose" |
	"seagull" | "seahorse" | "sidebartab" | "structure" | "whale" | "wolverine";

Authors:
	("author" | "authors") names+=STRING (',' names+=STRING)*;

Institute:
	"institute" name=STRING;

Date:
	"date" (date=STRING | {CompileDate} "*");

Slide:
	"slide" (sec=Section name=STRING | name=STRING)? "{" contents+=Content+ "}";

Section:
	{Sec} "*" | {SubSec} "**" | {SubSubSec} "***";

Content:
	(ToC | Text | Block | List | ShowImage | Table | Code | MathExp | Animation) (click=Click)?;

ToC:
	{ToC} "ToC" | {CurrentSecToC} "ToC" "*";

Text:
	(types+=TextType)* text=STRING;

TextType:
	{Bold} 'b' | {Italic} 'i' | {Underline} 'u' | {FootNote} 'fnote' | {URL} 'url';

Block:
	"block" (name=STRING)? "{" content+=Content+ "}";

List:
	NumberedList | UnNumberedList;

NumberedList:
	"#list" items+=ListItem+;

UnNumberedList:
	"&list" items+=ListItem+;

ListItem:
	"-" item=STRING ("(" nestedList=List ")")? (click=Click)?;

Image:
	"img" name=ID "src" src=STRING (angle=INT)? ("align" alignment=Alignment)? (size=Size);

ShowImage: 
	"showimg" image=[Image];

Alignment:
	"left" | "center" | "right"; 

Size:
	{ProportionalSize} way=Way scale=INT "%" | {ExactSize} way=Way size=INT unit=("cm" | "em" | "mm");

Way:
	{Width} "width" | {Height} "height";

Table:
	"tab" name=ID "[" rows+=TableRow ("," rows+=TableRow)* "]";

TableRow:
	"[" values+=STRING ("," values+=STRING)* "]";

Code:
	{InlineCode} "code" lang=ID code=STRING "end" | {FileCode} "filecode" lang=ID src=STRING ("show" "["
	lines+=LineSequence "]"
	("," "[" lines+=LineSequence
	"]")*)? "end";

LineSequence:
	lower=INT (":" upper=INT)? ("," additional=LineSequence)?;

Click:
	"$$";

Animation:
	"animate" target=[Image] "from" fromLocation=Alignment "to" finalLocation=Alignment ("via" viaLocation=Alignment)?;


MathExp:
	'math' (eval="eval")? exp=Exp;

Exp returns Expression:
	Factor (('+' {Plus.left=current} | '-' {Minus.left=current}) right=Factor)*;

Factor returns Expression:
	Pow (('*' {Mult.left=current} | '/' {Div.left=current}) right=Pow)*;

Pow returns Expression:
	Primary ({Pow.left=current} "^" right=Primary)?;

Primary returns Expression:
	Number | Parenthesis | VariableBinding | VariableUse;

VariableUse returns Expression:
	{Var} id=ID;

VariableBinding returns Expression:
	{Let} 'let' id=ID '=' binding=Exp 'in' body=Exp 'end';

Parenthesis returns Expression:
	'(' Exp ')';

Number returns Expression:
	{Num} value=INT;

	